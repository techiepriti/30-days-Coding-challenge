Problem : 

A password string, pwd, consists of binary characters (0s & 1s). A Cyber security expert is trying to determine the minimum number of changes required to make the password secure. To do so, it must be divided into substrings of non-overlapping, even length substrings. Each substring can only contain 1s or 0s, not a mix. This helps to ensure that the password is strong and less vulnerable to hacking attacks.

Find the minimum number of characters that must be flipped in the password string, i.e. changed from 0 to 1 or 1 to 0 to allow the string to be divided as described.

Test case 1 : 
Input : 
pwd = "101011"

Output = 2

Test case 2 : 
Input : 
pwd = "100110"

Output = 3

Solution : in Java
---------------------------------------------------------------------------------------------------------------------------------

import java.io.*;
import java.util.*;

public class MyClass {
    
    static int minFlips(int arr[]){
        
        int countFlips=0;
        
        for(int i=0; i<arr.length-1; i+=2){
            
            if(arr[i] != arr[i+1]){
                countFlips++;
            }
        }
        
        return countFlips;
    }
    
    static int[] toArray(String str){
 
        String[] splitArray = str.split("");
        int[] array = new int[splitArray.length];

        for(int i = 0; i < splitArray.length; i++) {
            array[i] = Integer.parseInt(splitArray[i]);
        }
        
        return array;
    
    }
    
    public static void main(String args[]) {
    
     //String pwd="101011";
     String pwd= "100110";
      
     System.out.println(Arrays.toString(toArray(pwd)));
     int result = minFlips(toArray(pwd));
     
      System.out.println("Minimum required Flips are : "+ result);
      
    }
}

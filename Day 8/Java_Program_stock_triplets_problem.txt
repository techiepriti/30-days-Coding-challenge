Problem : 

The cost of stock on each day is given in an array, arr. An investor wants to buy the stocks in triplets such that the sum of the cost for three days is divisible by d.
The goal is to find the number of distinct triplets (i,j,k) such that i<j<k and the sum a[i]+a[j]+a[k] is divisible by d.

Example
Let arr, prices of stock = [3, 3, 4, 7, 8] and d=5. Following are the triplets whose sum is divisible by d(1- based indexing).

. Triplet with indices -(1,2,3), sum = 3+3+4 which is equal to 10
. Triplet with indices -(1,3,5), sum = 3+4+8 which is equal to 15
. Triplet with indices -(2,3,4), sum = 3+4+8 which is equal to 15

Hence the answer is 3.

Solution : in Java
---------------------------------------------------------------------------------------------------------------------------------
import java.util.*;

public class MyClass {
    
    static int findTriplets(int d, int arr[]){
        
        int n = arr.length;
        int count=0;
        
        for(int i=0; i<n-2; i++){
            for(int j=i+1; j<n-1; j++){
                for(int k=j+1; k<n; k++){
                    
                    int sum = arr[i]+arr[j]+arr[k];
                    
                    if(sum % d == 0){
                        count++;
                    }
                }
              
            }
        }
        
        return count;
    }
    
    public static void main(String args[]) {
    
     //Declare value of d and array of stocks
     int d=5;
     int[] arr= {3,3,4,7,8};
     
     System.out.println("Given value of d : "+ d);
     System.out.println("Given Stock array is : "+ Arrays.toString(arr));
     
     System.out.println("");
     
     int result = findTriplets(d, arr);
      
     System.out.println("Total Number of possible distinct Triplets are :"+result);
    }
}